#!/bin/env python3

import numpy as np
np.set_printoptions(formatter={'int':hex})

import functools

BLOCK_SIZE = 16

l_vec_mul_gf = np.array([
    [0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff],
    [0x0, 0x94, 0xeb, 0x7f, 0x15, 0x81, 0xfe, 0x6a, 0x2a, 0xbe, 0xc1, 0x55, 0x3f, 0xab, 0xd4, 0x40, 0x54, 0xc0, 0xbf, 0x2b, 0x41, 0xd5, 0xaa, 0x3e, 0x7e, 0xea, 0x95, 0x1, 0x6b, 0xff, 0x80, 0x14, 0xa8, 0x3c, 0x43, 0xd7, 0xbd, 0x29, 0x56, 0xc2, 0x82, 0x16, 0x69, 0xfd, 0x97, 0x3, 0x7c, 0xe8, 0xfc, 0x68, 0x17, 0x83, 0xe9, 0x7d, 0x2, 0x96, 0xd6, 0x42, 0x3d, 0xa9, 0xc3, 0x57, 0x28, 0xbc, 0x93, 0x7, 0x78, 0xec, 0x86, 0x12, 0x6d, 0xf9, 0xb9, 0x2d, 0x52, 0xc6, 0xac, 0x38, 0x47, 0xd3, 0xc7, 0x53, 0x2c, 0xb8, 0xd2, 0x46, 0x39, 0xad, 0xed, 0x79, 0x6, 0x92, 0xf8, 0x6c, 0x13, 0x87, 0x3b, 0xaf, 0xd0, 0x44, 0x2e, 0xba, 0xc5, 0x51, 0x11, 0x85, 0xfa, 0x6e, 0x4, 0x90, 0xef, 0x7b, 0x6f, 0xfb, 0x84, 0x10, 0x7a, 0xee, 0x91, 0x5, 0x45, 0xd1, 0xae, 0x3a, 0x50, 0xc4, 0xbb, 0x2f, 0xe5, 0x71, 0xe, 0x9a, 0xf0, 0x64, 0x1b, 0x8f, 0xcf, 0x5b, 0x24, 0xb0, 0xda, 0x4e, 0x31, 0xa5, 0xb1, 0x25, 0x5a, 0xce, 0xa4, 0x30, 0x4f, 0xdb, 0x9b, 0xf, 0x70, 0xe4, 0x8e, 0x1a, 0x65, 0xf1, 0x4d, 0xd9, 0xa6, 0x32, 0x58, 0xcc, 0xb3, 0x27, 0x67, 0xf3, 0x8c, 0x18, 0x72, 0xe6, 0x99, 0xd, 0x19, 0x8d, 0xf2, 0x66, 0xc, 0x98, 0xe7, 0x73, 0x33, 0xa7, 0xd8, 0x4c, 0x26, 0xb2, 0xcd, 0x59, 0x76, 0xe2, 0x9d, 0x9, 0x63, 0xf7, 0x88, 0x1c, 0x5c, 0xc8, 0xb7, 0x23, 0x49, 0xdd, 0xa2, 0x36, 0x22, 0xb6, 0xc9, 0x5d, 0x37, 0xa3, 0xdc, 0x48, 0x8, 0x9c, 0xe3, 0x77, 0x1d, 0x89, 0xf6, 0x62, 0xde, 0x4a, 0x35, 0xa1, 0xcb, 0x5f, 0x20, 0xb4, 0xf4, 0x60, 0x1f, 0x8b, 0xe1, 0x75, 0xa, 0x9e, 0x8a, 0x1e, 0x61, 0xf5, 0x9f, 0xb, 0x74, 0xe0, 0xa0, 0x34, 0x4b, 0xdf, 0xb5, 0x21, 0x5e, 0xca],
    [0x0, 0x20, 0x40, 0x60, 0x80, 0xa0, 0xc0, 0xe0, 0xc3, 0xe3, 0x83, 0xa3, 0x43, 0x63, 0x3, 0x23, 0x45, 0x65, 0x5, 0x25, 0xc5, 0xe5, 0x85, 0xa5, 0x86, 0xa6, 0xc6, 0xe6, 0x6, 0x26, 0x46, 0x66, 0x8a, 0xaa, 0xca, 0xea, 0xa, 0x2a, 0x4a, 0x6a, 0x49, 0x69, 0x9, 0x29, 0xc9, 0xe9, 0x89, 0xa9, 0xcf, 0xef, 0x8f, 0xaf, 0x4f, 0x6f, 0xf, 0x2f, 0xc, 0x2c, 0x4c, 0x6c, 0x8c, 0xac, 0xcc, 0xec, 0xd7, 0xf7, 0x97, 0xb7, 0x57, 0x77, 0x17, 0x37, 0x14, 0x34, 0x54, 0x74, 0x94, 0xb4, 0xd4, 0xf4, 0x92, 0xb2, 0xd2, 0xf2, 0x12, 0x32, 0x52, 0x72, 0x51, 0x71, 0x11, 0x31, 0xd1, 0xf1, 0x91, 0xb1, 0x5d, 0x7d, 0x1d, 0x3d, 0xdd, 0xfd, 0x9d, 0xbd, 0x9e, 0xbe, 0xde, 0xfe, 0x1e, 0x3e, 0x5e, 0x7e, 0x18, 0x38, 0x58, 0x78, 0x98, 0xb8, 0xd8, 0xf8, 0xdb, 0xfb, 0x9b, 0xbb, 0x5b, 0x7b, 0x1b, 0x3b, 0x6d, 0x4d, 0x2d, 0xd, 0xed, 0xcd, 0xad, 0x8d, 0xae, 0x8e, 0xee, 0xce, 0x2e, 0xe, 0x6e, 0x4e, 0x28, 0x8, 0x68, 0x48, 0xa8, 0x88, 0xe8, 0xc8, 0xeb, 0xcb, 0xab, 0x8b, 0x6b, 0x4b, 0x2b, 0xb, 0xe7, 0xc7, 0xa7, 0x87, 0x67, 0x47, 0x27, 0x7, 0x24, 0x4, 0x64, 0x44, 0xa4, 0x84, 0xe4, 0xc4, 0xa2, 0x82, 0xe2, 0xc2, 0x22, 0x2, 0x62, 0x42, 0x61, 0x41, 0x21, 0x1, 0xe1, 0xc1, 0xa1, 0x81, 0xba, 0x9a, 0xfa, 0xda, 0x3a, 0x1a, 0x7a, 0x5a, 0x79, 0x59, 0x39, 0x19, 0xf9, 0xd9, 0xb9, 0x99, 0xff, 0xdf, 0xbf, 0x9f, 0x7f, 0x5f, 0x3f, 0x1f, 0x3c, 0x1c, 0x7c, 0x5c, 0xbc, 0x9c, 0xfc, 0xdc, 0x30, 0x10, 0x70, 0x50, 0xb0, 0x90, 0xf0, 0xd0, 0xf3, 0xd3, 0xb3, 0x93, 0x73, 0x53, 0x33, 0x13, 0x75, 0x55, 0x35, 0x15, 0xf5, 0xd5, 0xb5, 0x95, 0xb6, 0x96, 0xf6, 0xd6, 0x36, 0x16, 0x76, 0x56],
    [0x0, 0x85, 0xc9, 0x4c, 0x51, 0xd4, 0x98, 0x1d, 0xa2, 0x27, 0x6b, 0xee, 0xf3, 0x76, 0x3a, 0xbf, 0x87, 0x2, 0x4e, 0xcb, 0xd6, 0x53, 0x1f, 0x9a, 0x25, 0xa0, 0xec, 0x69, 0x74, 0xf1, 0xbd, 0x38, 0xcd, 0x48, 0x4, 0x81, 0x9c, 0x19, 0x55, 0xd0, 0x6f, 0xea, 0xa6, 0x23, 0x3e, 0xbb, 0xf7, 0x72, 0x4a, 0xcf, 0x83, 0x6, 0x1b, 0x9e, 0xd2, 0x57, 0xe8, 0x6d, 0x21, 0xa4, 0xb9, 0x3c, 0x70, 0xf5, 0x59, 0xdc, 0x90, 0x15, 0x8, 0x8d, 0xc1, 0x44, 0xfb, 0x7e, 0x32, 0xb7, 0xaa, 0x2f, 0x63, 0xe6, 0xde, 0x5b, 0x17, 0x92, 0x8f, 0xa, 0x46, 0xc3, 0x7c, 0xf9, 0xb5, 0x30, 0x2d, 0xa8, 0xe4, 0x61, 0x94, 0x11, 0x5d, 0xd8, 0xc5, 0x40, 0xc, 0x89, 0x36, 0xb3, 0xff, 0x7a, 0x67, 0xe2, 0xae, 0x2b, 0x13, 0x96, 0xda, 0x5f, 0x42, 0xc7, 0x8b, 0xe, 0xb1, 0x34, 0x78, 0xfd, 0xe0, 0x65, 0x29, 0xac, 0xb2, 0x37, 0x7b, 0xfe, 0xe3, 0x66, 0x2a, 0xaf, 0x10, 0x95, 0xd9, 0x5c, 0x41, 0xc4, 0x88, 0xd, 0x35, 0xb0, 0xfc, 0x79, 0x64, 0xe1, 0xad, 0x28, 0x97, 0x12, 0x5e, 0xdb, 0xc6, 0x43, 0xf, 0x8a, 0x7f, 0xfa, 0xb6, 0x33, 0x2e, 0xab, 0xe7, 0x62, 0xdd, 0x58, 0x14, 0x91, 0x8c, 0x9, 0x45, 0xc0, 0xf8, 0x7d, 0x31, 0xb4, 0xa9, 0x2c, 0x60, 0xe5, 0x5a, 0xdf, 0x93, 0x16, 0xb, 0x8e, 0xc2, 0x47, 0xeb, 0x6e, 0x22, 0xa7, 0xba, 0x3f, 0x73, 0xf6, 0x49, 0xcc, 0x80, 0x5, 0x18, 0x9d, 0xd1, 0x54, 0x6c, 0xe9, 0xa5, 0x20, 0x3d, 0xb8, 0xf4, 0x71, 0xce, 0x4b, 0x7, 0x82, 0x9f, 0x1a, 0x56, 0xd3, 0x26, 0xa3, 0xef, 0x6a, 0x77, 0xf2, 0xbe, 0x3b, 0x84, 0x1, 0x4d, 0xc8, 0xd5, 0x50, 0x1c, 0x99, 0xa1, 0x24, 0x68, 0xed, 0xf0, 0x75, 0x39, 0xbc, 0x3, 0x86, 0xca, 0x4f, 0x52, 0xd7, 0x9b, 0x1e],
    [0x0, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0xa0, 0xb0, 0xc0, 0xd0, 0xe0, 0xf0, 0xc3, 0xd3, 0xe3, 0xf3, 0x83, 0x93, 0xa3, 0xb3, 0x43, 0x53, 0x63, 0x73, 0x3, 0x13, 0x23, 0x33, 0x45, 0x55, 0x65, 0x75, 0x5, 0x15, 0x25, 0x35, 0xc5, 0xd5, 0xe5, 0xf5, 0x85, 0x95, 0xa5, 0xb5, 0x86, 0x96, 0xa6, 0xb6, 0xc6, 0xd6, 0xe6, 0xf6, 0x6, 0x16, 0x26, 0x36, 0x46, 0x56, 0x66, 0x76, 0x8a, 0x9a, 0xaa, 0xba, 0xca, 0xda, 0xea, 0xfa, 0xa, 0x1a, 0x2a, 0x3a, 0x4a, 0x5a, 0x6a, 0x7a, 0x49, 0x59, 0x69, 0x79, 0x9, 0x19, 0x29, 0x39, 0xc9, 0xd9, 0xe9, 0xf9, 0x89, 0x99, 0xa9, 0xb9, 0xcf, 0xdf, 0xef, 0xff, 0x8f, 0x9f, 0xaf, 0xbf, 0x4f, 0x5f, 0x6f, 0x7f, 0xf, 0x1f, 0x2f, 0x3f, 0xc, 0x1c, 0x2c, 0x3c, 0x4c, 0x5c, 0x6c, 0x7c, 0x8c, 0x9c, 0xac, 0xbc, 0xcc, 0xdc, 0xec, 0xfc, 0xd7, 0xc7, 0xf7, 0xe7, 0x97, 0x87, 0xb7, 0xa7, 0x57, 0x47, 0x77, 0x67, 0x17, 0x7, 0x37, 0x27, 0x14, 0x4, 0x34, 0x24, 0x54, 0x44, 0x74, 0x64, 0x94, 0x84, 0xb4, 0xa4, 0xd4, 0xc4, 0xf4, 0xe4, 0x92, 0x82, 0xb2, 0xa2, 0xd2, 0xc2, 0xf2, 0xe2, 0x12, 0x2, 0x32, 0x22, 0x52, 0x42, 0x72, 0x62, 0x51, 0x41, 0x71, 0x61, 0x11, 0x1, 0x31, 0x21, 0xd1, 0xc1, 0xf1, 0xe1, 0x91, 0x81, 0xb1, 0xa1, 0x5d, 0x4d, 0x7d, 0x6d, 0x1d, 0xd, 0x3d, 0x2d, 0xdd, 0xcd, 0xfd, 0xed, 0x9d, 0x8d, 0xbd, 0xad, 0x9e, 0x8e, 0xbe, 0xae, 0xde, 0xce, 0xfe, 0xee, 0x1e, 0xe, 0x3e, 0x2e, 0x5e, 0x4e, 0x7e, 0x6e, 0x18, 0x8, 0x38, 0x28, 0x58, 0x48, 0x78, 0x68, 0x98, 0x88, 0xb8, 0xa8, 0xd8, 0xc8, 0xf8, 0xe8, 0xdb, 0xcb, 0xfb, 0xeb, 0x9b, 0x8b, 0xbb, 0xab, 0x5b, 0x4b, 0x7b, 0x6b, 0x1b, 0xb, 0x3b, 0x2b],
    [0x0, 0xc2, 0x47, 0x85, 0x8e, 0x4c, 0xc9, 0xb, 0xdf, 0x1d, 0x98, 0x5a, 0x51, 0x93, 0x16, 0xd4, 0x7d, 0xbf, 0x3a, 0xf8, 0xf3, 0x31, 0xb4, 0x76, 0xa2, 0x60, 0xe5, 0x27, 0x2c, 0xee, 0x6b, 0xa9, 0xfa, 0x38, 0xbd, 0x7f, 0x74, 0xb6, 0x33, 0xf1, 0x25, 0xe7, 0x62, 0xa0, 0xab, 0x69, 0xec, 0x2e, 0x87, 0x45, 0xc0, 0x2, 0x9, 0xcb, 0x4e, 0x8c, 0x58, 0x9a, 0x1f, 0xdd, 0xd6, 0x14, 0x91, 0x53, 0x37, 0xf5, 0x70, 0xb2, 0xb9, 0x7b, 0xfe, 0x3c, 0xe8, 0x2a, 0xaf, 0x6d, 0x66, 0xa4, 0x21, 0xe3, 0x4a, 0x88, 0xd, 0xcf, 0xc4, 0x6, 0x83, 0x41, 0x95, 0x57, 0xd2, 0x10, 0x1b, 0xd9, 0x5c, 0x9e, 0xcd, 0xf, 0x8a, 0x48, 0x43, 0x81, 0x4, 0xc6, 0x12, 0xd0, 0x55, 0x97, 0x9c, 0x5e, 0xdb, 0x19, 0xb0, 0x72, 0xf7, 0x35, 0x3e, 0xfc, 0x79, 0xbb, 0x6f, 0xad, 0x28, 0xea, 0xe1, 0x23, 0xa6, 0x64, 0x6e, 0xac, 0x29, 0xeb, 0xe0, 0x22, 0xa7, 0x65, 0xb1, 0x73, 0xf6, 0x34, 0x3f, 0xfd, 0x78, 0xba, 0x13, 0xd1, 0x54, 0x96, 0x9d, 0x5f, 0xda, 0x18, 0xcc, 0xe, 0x8b, 0x49, 0x42, 0x80, 0x5, 0xc7, 0x94, 0x56, 0xd3, 0x11, 0x1a, 0xd8, 0x5d, 0x9f, 0x4b, 0x89, 0xc, 0xce, 0xc5, 0x7, 0x82, 0x40, 0xe9, 0x2b, 0xae, 0x6c, 0x67, 0xa5, 0x20, 0xe2, 0x36, 0xf4, 0x71, 0xb3, 0xb8, 0x7a, 0xff, 0x3d, 0x59, 0x9b, 0x1e, 0xdc, 0xd7, 0x15, 0x90, 0x52, 0x86, 0x44, 0xc1, 0x3, 0x8, 0xca, 0x4f, 0x8d, 0x24, 0xe6, 0x63, 0xa1, 0xaa, 0x68, 0xed, 0x2f, 0xfb, 0x39, 0xbc, 0x7e, 0x75, 0xb7, 0x32, 0xf0, 0xa3, 0x61, 0xe4, 0x26, 0x2d, 0xef, 0x6a, 0xa8, 0x7c, 0xbe, 0x3b, 0xf9, 0xf2, 0x30, 0xb5, 0x77, 0xde, 0x1c, 0x99, 0x5b, 0x50, 0x92, 0x17, 0xd5, 0x1, 0xc3, 0x46, 0x84, 0x8f, 0x4d, 0xc8, 0xa],
    [0x0, 0xc0, 0x43, 0x83, 0x86, 0x46, 0xc5, 0x5, 0xcf, 0xf, 0x8c, 0x4c, 0x49, 0x89, 0xa, 0xca, 0x5d, 0x9d, 0x1e, 0xde, 0xdb, 0x1b, 0x98, 0x58, 0x92, 0x52, 0xd1, 0x11, 0x14, 0xd4, 0x57, 0x97, 0xba, 0x7a, 0xf9, 0x39, 0x3c, 0xfc, 0x7f, 0xbf, 0x75, 0xb5, 0x36, 0xf6, 0xf3, 0x33, 0xb0, 0x70, 0xe7, 0x27, 0xa4, 0x64, 0x61, 0xa1, 0x22, 0xe2, 0x28, 0xe8, 0x6b, 0xab, 0xae, 0x6e, 0xed, 0x2d, 0xb7, 0x77, 0xf4, 0x34, 0x31, 0xf1, 0x72, 0xb2, 0x78, 0xb8, 0x3b, 0xfb, 0xfe, 0x3e, 0xbd, 0x7d, 0xea, 0x2a, 0xa9, 0x69, 0x6c, 0xac, 0x2f, 0xef, 0x25, 0xe5, 0x66, 0xa6, 0xa3, 0x63, 0xe0, 0x20, 0xd, 0xcd, 0x4e, 0x8e, 0x8b, 0x4b, 0xc8, 0x8, 0xc2, 0x2, 0x81, 0x41, 0x44, 0x84, 0x7, 0xc7, 0x50, 0x90, 0x13, 0xd3, 0xd6, 0x16, 0x95, 0x55, 0x9f, 0x5f, 0xdc, 0x1c, 0x19, 0xd9, 0x5a, 0x9a, 0xad, 0x6d, 0xee, 0x2e, 0x2b, 0xeb, 0x68, 0xa8, 0x62, 0xa2, 0x21, 0xe1, 0xe4, 0x24, 0xa7, 0x67, 0xf0, 0x30, 0xb3, 0x73, 0x76, 0xb6, 0x35, 0xf5, 0x3f, 0xff, 0x7c, 0xbc, 0xb9, 0x79, 0xfa, 0x3a, 0x17, 0xd7, 0x54, 0x94, 0x91, 0x51, 0xd2, 0x12, 0xd8, 0x18, 0x9b, 0x5b, 0x5e, 0x9e, 0x1d, 0xdd, 0x4a, 0x8a, 0x9, 0xc9, 0xcc, 0xc, 0x8f, 0x4f, 0x85, 0x45, 0xc6, 0x6, 0x3, 0xc3, 0x40, 0x80, 0x1a, 0xda, 0x59, 0x99, 0x9c, 0x5c, 0xdf, 0x1f, 0xd5, 0x15, 0x96, 0x56, 0x53, 0x93, 0x10, 0xd0, 0x47, 0x87, 0x4, 0xc4, 0xc1, 0x1, 0x82, 0x42, 0x88, 0x48, 0xcb, 0xb, 0xe, 0xce, 0x4d, 0x8d, 0xa0, 0x60, 0xe3, 0x23, 0x26, 0xe6, 0x65, 0xa5, 0x6f, 0xaf, 0x2c, 0xec, 0xe9, 0x29, 0xaa, 0x6a, 0xfd, 0x3d, 0xbe, 0x7e, 0x7b, 0xbb, 0x38, 0xf8, 0x32, 0xf2, 0x71, 0xb1, 0xb4, 0x74, 0xf7, 0x37],
    [0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff],
    [0x0, 0xfb, 0x35, 0xce, 0x6a, 0x91, 0x5f, 0xa4, 0xd4, 0x2f, 0xe1, 0x1a, 0xbe, 0x45, 0x8b, 0x70, 0x6b, 0x90, 0x5e, 0xa5, 0x1, 0xfa, 0x34, 0xcf, 0xbf, 0x44, 0x8a, 0x71, 0xd5, 0x2e, 0xe0, 0x1b, 0xd6, 0x2d, 0xe3, 0x18, 0xbc, 0x47, 0x89, 0x72, 0x2, 0xf9, 0x37, 0xcc, 0x68, 0x93, 0x5d, 0xa6, 0xbd, 0x46, 0x88, 0x73, 0xd7, 0x2c, 0xe2, 0x19, 0x69, 0x92, 0x5c, 0xa7, 0x3, 0xf8, 0x36, 0xcd, 0x6f, 0x94, 0x5a, 0xa1, 0x5, 0xfe, 0x30, 0xcb, 0xbb, 0x40, 0x8e, 0x75, 0xd1, 0x2a, 0xe4, 0x1f, 0x4, 0xff, 0x31, 0xca, 0x6e, 0x95, 0x5b, 0xa0, 0xd0, 0x2b, 0xe5, 0x1e, 0xba, 0x41, 0x8f, 0x74, 0xb9, 0x42, 0x8c, 0x77, 0xd3, 0x28, 0xe6, 0x1d, 0x6d, 0x96, 0x58, 0xa3, 0x7, 0xfc, 0x32, 0xc9, 0xd2, 0x29, 0xe7, 0x1c, 0xb8, 0x43, 0x8d, 0x76, 0x6, 0xfd, 0x33, 0xc8, 0x6c, 0x97, 0x59, 0xa2, 0xde, 0x25, 0xeb, 0x10, 0xb4, 0x4f, 0x81, 0x7a, 0xa, 0xf1, 0x3f, 0xc4, 0x60, 0x9b, 0x55, 0xae, 0xb5, 0x4e, 0x80, 0x7b, 0xdf, 0x24, 0xea, 0x11, 0x61, 0x9a, 0x54, 0xaf, 0xb, 0xf0, 0x3e, 0xc5, 0x8, 0xf3, 0x3d, 0xc6, 0x62, 0x99, 0x57, 0xac, 0xdc, 0x27, 0xe9, 0x12, 0xb6, 0x4d, 0x83, 0x78, 0x63, 0x98, 0x56, 0xad, 0x9, 0xf2, 0x3c, 0xc7, 0xb7, 0x4c, 0x82, 0x79, 0xdd, 0x26, 0xe8, 0x13, 0xb1, 0x4a, 0x84, 0x7f, 0xdb, 0x20, 0xee, 0x15, 0x65, 0x9e, 0x50, 0xab, 0xf, 0xf4, 0x3a, 0xc1, 0xda, 0x21, 0xef, 0x14, 0xb0, 0x4b, 0x85, 0x7e, 0xe, 0xf5, 0x3b, 0xc0, 0x64, 0x9f, 0x51, 0xaa, 0x67, 0x9c, 0x52, 0xa9, 0xd, 0xf6, 0x38, 0xc3, 0xb3, 0x48, 0x86, 0x7d, 0xd9, 0x22, 0xec, 0x17, 0xc, 0xf7, 0x39, 0xc2, 0x66, 0x9d, 0x53, 0xa8, 0xd8, 0x23, 0xed, 0x16, 0xb2, 0x49, 0x87, 0x7c],
    [0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff],
    [0x0, 0xc0, 0x43, 0x83, 0x86, 0x46, 0xc5, 0x5, 0xcf, 0xf, 0x8c, 0x4c, 0x49, 0x89, 0xa, 0xca, 0x5d, 0x9d, 0x1e, 0xde, 0xdb, 0x1b, 0x98, 0x58, 0x92, 0x52, 0xd1, 0x11, 0x14, 0xd4, 0x57, 0x97, 0xba, 0x7a, 0xf9, 0x39, 0x3c, 0xfc, 0x7f, 0xbf, 0x75, 0xb5, 0x36, 0xf6, 0xf3, 0x33, 0xb0, 0x70, 0xe7, 0x27, 0xa4, 0x64, 0x61, 0xa1, 0x22, 0xe2, 0x28, 0xe8, 0x6b, 0xab, 0xae, 0x6e, 0xed, 0x2d, 0xb7, 0x77, 0xf4, 0x34, 0x31, 0xf1, 0x72, 0xb2, 0x78, 0xb8, 0x3b, 0xfb, 0xfe, 0x3e, 0xbd, 0x7d, 0xea, 0x2a, 0xa9, 0x69, 0x6c, 0xac, 0x2f, 0xef, 0x25, 0xe5, 0x66, 0xa6, 0xa3, 0x63, 0xe0, 0x20, 0xd, 0xcd, 0x4e, 0x8e, 0x8b, 0x4b, 0xc8, 0x8, 0xc2, 0x2, 0x81, 0x41, 0x44, 0x84, 0x7, 0xc7, 0x50, 0x90, 0x13, 0xd3, 0xd6, 0x16, 0x95, 0x55, 0x9f, 0x5f, 0xdc, 0x1c, 0x19, 0xd9, 0x5a, 0x9a, 0xad, 0x6d, 0xee, 0x2e, 0x2b, 0xeb, 0x68, 0xa8, 0x62, 0xa2, 0x21, 0xe1, 0xe4, 0x24, 0xa7, 0x67, 0xf0, 0x30, 0xb3, 0x73, 0x76, 0xb6, 0x35, 0xf5, 0x3f, 0xff, 0x7c, 0xbc, 0xb9, 0x79, 0xfa, 0x3a, 0x17, 0xd7, 0x54, 0x94, 0x91, 0x51, 0xd2, 0x12, 0xd8, 0x18, 0x9b, 0x5b, 0x5e, 0x9e, 0x1d, 0xdd, 0x4a, 0x8a, 0x9, 0xc9, 0xcc, 0xc, 0x8f, 0x4f, 0x85, 0x45, 0xc6, 0x6, 0x3, 0xc3, 0x40, 0x80, 0x1a, 0xda, 0x59, 0x99, 0x9c, 0x5c, 0xdf, 0x1f, 0xd5, 0x15, 0x96, 0x56, 0x53, 0x93, 0x10, 0xd0, 0x47, 0x87, 0x4, 0xc4, 0xc1, 0x1, 0x82, 0x42, 0x88, 0x48, 0xcb, 0xb, 0xe, 0xce, 0x4d, 0x8d, 0xa0, 0x60, 0xe3, 0x23, 0x26, 0xe6, 0x65, 0xa5, 0x6f, 0xaf, 0x2c, 0xec, 0xe9, 0x29, 0xaa, 0x6a, 0xfd, 0x3d, 0xbe, 0x7e, 0x7b, 0xbb, 0x38, 0xf8, 0x32, 0xf2, 0x71, 0xb1, 0xb4, 0x74, 0xf7, 0x37],
    [0x0, 0xc2, 0x47, 0x85, 0x8e, 0x4c, 0xc9, 0xb, 0xdf, 0x1d, 0x98, 0x5a, 0x51, 0x93, 0x16, 0xd4, 0x7d, 0xbf, 0x3a, 0xf8, 0xf3, 0x31, 0xb4, 0x76, 0xa2, 0x60, 0xe5, 0x27, 0x2c, 0xee, 0x6b, 0xa9, 0xfa, 0x38, 0xbd, 0x7f, 0x74, 0xb6, 0x33, 0xf1, 0x25, 0xe7, 0x62, 0xa0, 0xab, 0x69, 0xec, 0x2e, 0x87, 0x45, 0xc0, 0x2, 0x9, 0xcb, 0x4e, 0x8c, 0x58, 0x9a, 0x1f, 0xdd, 0xd6, 0x14, 0x91, 0x53, 0x37, 0xf5, 0x70, 0xb2, 0xb9, 0x7b, 0xfe, 0x3c, 0xe8, 0x2a, 0xaf, 0x6d, 0x66, 0xa4, 0x21, 0xe3, 0x4a, 0x88, 0xd, 0xcf, 0xc4, 0x6, 0x83, 0x41, 0x95, 0x57, 0xd2, 0x10, 0x1b, 0xd9, 0x5c, 0x9e, 0xcd, 0xf, 0x8a, 0x48, 0x43, 0x81, 0x4, 0xc6, 0x12, 0xd0, 0x55, 0x97, 0x9c, 0x5e, 0xdb, 0x19, 0xb0, 0x72, 0xf7, 0x35, 0x3e, 0xfc, 0x79, 0xbb, 0x6f, 0xad, 0x28, 0xea, 0xe1, 0x23, 0xa6, 0x64, 0x6e, 0xac, 0x29, 0xeb, 0xe0, 0x22, 0xa7, 0x65, 0xb1, 0x73, 0xf6, 0x34, 0x3f, 0xfd, 0x78, 0xba, 0x13, 0xd1, 0x54, 0x96, 0x9d, 0x5f, 0xda, 0x18, 0xcc, 0xe, 0x8b, 0x49, 0x42, 0x80, 0x5, 0xc7, 0x94, 0x56, 0xd3, 0x11, 0x1a, 0xd8, 0x5d, 0x9f, 0x4b, 0x89, 0xc, 0xce, 0xc5, 0x7, 0x82, 0x40, 0xe9, 0x2b, 0xae, 0x6c, 0x67, 0xa5, 0x20, 0xe2, 0x36, 0xf4, 0x71, 0xb3, 0xb8, 0x7a, 0xff, 0x3d, 0x59, 0x9b, 0x1e, 0xdc, 0xd7, 0x15, 0x90, 0x52, 0x86, 0x44, 0xc1, 0x3, 0x8, 0xca, 0x4f, 0x8d, 0x24, 0xe6, 0x63, 0xa1, 0xaa, 0x68, 0xed, 0x2f, 0xfb, 0x39, 0xbc, 0x7e, 0x75, 0xb7, 0x32, 0xf0, 0xa3, 0x61, 0xe4, 0x26, 0x2d, 0xef, 0x6a, 0xa8, 0x7c, 0xbe, 0x3b, 0xf9, 0xf2, 0x30, 0xb5, 0x77, 0xde, 0x1c, 0x99, 0x5b, 0x50, 0x92, 0x17, 0xd5, 0x1, 0xc3, 0x46, 0x84, 0x8f, 0x4d, 0xc8, 0xa],
    [0x0, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0xa0, 0xb0, 0xc0, 0xd0, 0xe0, 0xf0, 0xc3, 0xd3, 0xe3, 0xf3, 0x83, 0x93, 0xa3, 0xb3, 0x43, 0x53, 0x63, 0x73, 0x3, 0x13, 0x23, 0x33, 0x45, 0x55, 0x65, 0x75, 0x5, 0x15, 0x25, 0x35, 0xc5, 0xd5, 0xe5, 0xf5, 0x85, 0x95, 0xa5, 0xb5, 0x86, 0x96, 0xa6, 0xb6, 0xc6, 0xd6, 0xe6, 0xf6, 0x6, 0x16, 0x26, 0x36, 0x46, 0x56, 0x66, 0x76, 0x8a, 0x9a, 0xaa, 0xba, 0xca, 0xda, 0xea, 0xfa, 0xa, 0x1a, 0x2a, 0x3a, 0x4a, 0x5a, 0x6a, 0x7a, 0x49, 0x59, 0x69, 0x79, 0x9, 0x19, 0x29, 0x39, 0xc9, 0xd9, 0xe9, 0xf9, 0x89, 0x99, 0xa9, 0xb9, 0xcf, 0xdf, 0xef, 0xff, 0x8f, 0x9f, 0xaf, 0xbf, 0x4f, 0x5f, 0x6f, 0x7f, 0xf, 0x1f, 0x2f, 0x3f, 0xc, 0x1c, 0x2c, 0x3c, 0x4c, 0x5c, 0x6c, 0x7c, 0x8c, 0x9c, 0xac, 0xbc, 0xcc, 0xdc, 0xec, 0xfc, 0xd7, 0xc7, 0xf7, 0xe7, 0x97, 0x87, 0xb7, 0xa7, 0x57, 0x47, 0x77, 0x67, 0x17, 0x7, 0x37, 0x27, 0x14, 0x4, 0x34, 0x24, 0x54, 0x44, 0x74, 0x64, 0x94, 0x84, 0xb4, 0xa4, 0xd4, 0xc4, 0xf4, 0xe4, 0x92, 0x82, 0xb2, 0xa2, 0xd2, 0xc2, 0xf2, 0xe2, 0x12, 0x2, 0x32, 0x22, 0x52, 0x42, 0x72, 0x62, 0x51, 0x41, 0x71, 0x61, 0x11, 0x1, 0x31, 0x21, 0xd1, 0xc1, 0xf1, 0xe1, 0x91, 0x81, 0xb1, 0xa1, 0x5d, 0x4d, 0x7d, 0x6d, 0x1d, 0xd, 0x3d, 0x2d, 0xdd, 0xcd, 0xfd, 0xed, 0x9d, 0x8d, 0xbd, 0xad, 0x9e, 0x8e, 0xbe, 0xae, 0xde, 0xce, 0xfe, 0xee, 0x1e, 0xe, 0x3e, 0x2e, 0x5e, 0x4e, 0x7e, 0x6e, 0x18, 0x8, 0x38, 0x28, 0x58, 0x48, 0x78, 0x68, 0x98, 0x88, 0xb8, 0xa8, 0xd8, 0xc8, 0xf8, 0xe8, 0xdb, 0xcb, 0xfb, 0xeb, 0x9b, 0x8b, 0xbb, 0xab, 0x5b, 0x4b, 0x7b, 0x6b, 0x1b, 0xb, 0x3b, 0x2b],
    [0x0, 0x85, 0xc9, 0x4c, 0x51, 0xd4, 0x98, 0x1d, 0xa2, 0x27, 0x6b, 0xee, 0xf3, 0x76, 0x3a, 0xbf, 0x87, 0x2, 0x4e, 0xcb, 0xd6, 0x53, 0x1f, 0x9a, 0x25, 0xa0, 0xec, 0x69, 0x74, 0xf1, 0xbd, 0x38, 0xcd, 0x48, 0x4, 0x81, 0x9c, 0x19, 0x55, 0xd0, 0x6f, 0xea, 0xa6, 0x23, 0x3e, 0xbb, 0xf7, 0x72, 0x4a, 0xcf, 0x83, 0x6, 0x1b, 0x9e, 0xd2, 0x57, 0xe8, 0x6d, 0x21, 0xa4, 0xb9, 0x3c, 0x70, 0xf5, 0x59, 0xdc, 0x90, 0x15, 0x8, 0x8d, 0xc1, 0x44, 0xfb, 0x7e, 0x32, 0xb7, 0xaa, 0x2f, 0x63, 0xe6, 0xde, 0x5b, 0x17, 0x92, 0x8f, 0xa, 0x46, 0xc3, 0x7c, 0xf9, 0xb5, 0x30, 0x2d, 0xa8, 0xe4, 0x61, 0x94, 0x11, 0x5d, 0xd8, 0xc5, 0x40, 0xc, 0x89, 0x36, 0xb3, 0xff, 0x7a, 0x67, 0xe2, 0xae, 0x2b, 0x13, 0x96, 0xda, 0x5f, 0x42, 0xc7, 0x8b, 0xe, 0xb1, 0x34, 0x78, 0xfd, 0xe0, 0x65, 0x29, 0xac, 0xb2, 0x37, 0x7b, 0xfe, 0xe3, 0x66, 0x2a, 0xaf, 0x10, 0x95, 0xd9, 0x5c, 0x41, 0xc4, 0x88, 0xd, 0x35, 0xb0, 0xfc, 0x79, 0x64, 0xe1, 0xad, 0x28, 0x97, 0x12, 0x5e, 0xdb, 0xc6, 0x43, 0xf, 0x8a, 0x7f, 0xfa, 0xb6, 0x33, 0x2e, 0xab, 0xe7, 0x62, 0xdd, 0x58, 0x14, 0x91, 0x8c, 0x9, 0x45, 0xc0, 0xf8, 0x7d, 0x31, 0xb4, 0xa9, 0x2c, 0x60, 0xe5, 0x5a, 0xdf, 0x93, 0x16, 0xb, 0x8e, 0xc2, 0x47, 0xeb, 0x6e, 0x22, 0xa7, 0xba, 0x3f, 0x73, 0xf6, 0x49, 0xcc, 0x80, 0x5, 0x18, 0x9d, 0xd1, 0x54, 0x6c, 0xe9, 0xa5, 0x20, 0x3d, 0xb8, 0xf4, 0x71, 0xce, 0x4b, 0x7, 0x82, 0x9f, 0x1a, 0x56, 0xd3, 0x26, 0xa3, 0xef, 0x6a, 0x77, 0xf2, 0xbe, 0x3b, 0x84, 0x1, 0x4d, 0xc8, 0xd5, 0x50, 0x1c, 0x99, 0xa1, 0x24, 0x68, 0xed, 0xf0, 0x75, 0x39, 0xbc, 0x3, 0x86, 0xca, 0x4f, 0x52, 0xd7, 0x9b, 0x1e],
    [0x0, 0x20, 0x40, 0x60, 0x80, 0xa0, 0xc0, 0xe0, 0xc3, 0xe3, 0x83, 0xa3, 0x43, 0x63, 0x3, 0x23, 0x45, 0x65, 0x5, 0x25, 0xc5, 0xe5, 0x85, 0xa5, 0x86, 0xa6, 0xc6, 0xe6, 0x6, 0x26, 0x46, 0x66, 0x8a, 0xaa, 0xca, 0xea, 0xa, 0x2a, 0x4a, 0x6a, 0x49, 0x69, 0x9, 0x29, 0xc9, 0xe9, 0x89, 0xa9, 0xcf, 0xef, 0x8f, 0xaf, 0x4f, 0x6f, 0xf, 0x2f, 0xc, 0x2c, 0x4c, 0x6c, 0x8c, 0xac, 0xcc, 0xec, 0xd7, 0xf7, 0x97, 0xb7, 0x57, 0x77, 0x17, 0x37, 0x14, 0x34, 0x54, 0x74, 0x94, 0xb4, 0xd4, 0xf4, 0x92, 0xb2, 0xd2, 0xf2, 0x12, 0x32, 0x52, 0x72, 0x51, 0x71, 0x11, 0x31, 0xd1, 0xf1, 0x91, 0xb1, 0x5d, 0x7d, 0x1d, 0x3d, 0xdd, 0xfd, 0x9d, 0xbd, 0x9e, 0xbe, 0xde, 0xfe, 0x1e, 0x3e, 0x5e, 0x7e, 0x18, 0x38, 0x58, 0x78, 0x98, 0xb8, 0xd8, 0xf8, 0xdb, 0xfb, 0x9b, 0xbb, 0x5b, 0x7b, 0x1b, 0x3b, 0x6d, 0x4d, 0x2d, 0xd, 0xed, 0xcd, 0xad, 0x8d, 0xae, 0x8e, 0xee, 0xce, 0x2e, 0xe, 0x6e, 0x4e, 0x28, 0x8, 0x68, 0x48, 0xa8, 0x88, 0xe8, 0xc8, 0xeb, 0xcb, 0xab, 0x8b, 0x6b, 0x4b, 0x2b, 0xb, 0xe7, 0xc7, 0xa7, 0x87, 0x67, 0x47, 0x27, 0x7, 0x24, 0x4, 0x64, 0x44, 0xa4, 0x84, 0xe4, 0xc4, 0xa2, 0x82, 0xe2, 0xc2, 0x22, 0x2, 0x62, 0x42, 0x61, 0x41, 0x21, 0x1, 0xe1, 0xc1, 0xa1, 0x81, 0xba, 0x9a, 0xfa, 0xda, 0x3a, 0x1a, 0x7a, 0x5a, 0x79, 0x59, 0x39, 0x19, 0xf9, 0xd9, 0xb9, 0x99, 0xff, 0xdf, 0xbf, 0x9f, 0x7f, 0x5f, 0x3f, 0x1f, 0x3c, 0x1c, 0x7c, 0x5c, 0xbc, 0x9c, 0xfc, 0xdc, 0x30, 0x10, 0x70, 0x50, 0xb0, 0x90, 0xf0, 0xd0, 0xf3, 0xd3, 0xb3, 0x93, 0x73, 0x53, 0x33, 0x13, 0x75, 0x55, 0x35, 0x15, 0xf5, 0xd5, 0xb5, 0x95, 0xb6, 0x96, 0xf6, 0xd6, 0x36, 0x16, 0x76, 0x56],
    [0x0, 0x94, 0xeb, 0x7f, 0x15, 0x81, 0xfe, 0x6a, 0x2a, 0xbe, 0xc1, 0x55, 0x3f, 0xab, 0xd4, 0x40, 0x54, 0xc0, 0xbf, 0x2b, 0x41, 0xd5, 0xaa, 0x3e, 0x7e, 0xea, 0x95, 0x1, 0x6b, 0xff, 0x80, 0x14, 0xa8, 0x3c, 0x43, 0xd7, 0xbd, 0x29, 0x56, 0xc2, 0x82, 0x16, 0x69, 0xfd, 0x97, 0x3, 0x7c, 0xe8, 0xfc, 0x68, 0x17, 0x83, 0xe9, 0x7d, 0x2, 0x96, 0xd6, 0x42, 0x3d, 0xa9, 0xc3, 0x57, 0x28, 0xbc, 0x93, 0x7, 0x78, 0xec, 0x86, 0x12, 0x6d, 0xf9, 0xb9, 0x2d, 0x52, 0xc6, 0xac, 0x38, 0x47, 0xd3, 0xc7, 0x53, 0x2c, 0xb8, 0xd2, 0x46, 0x39, 0xad, 0xed, 0x79, 0x6, 0x92, 0xf8, 0x6c, 0x13, 0x87, 0x3b, 0xaf, 0xd0, 0x44, 0x2e, 0xba, 0xc5, 0x51, 0x11, 0x85, 0xfa, 0x6e, 0x4, 0x90, 0xef, 0x7b, 0x6f, 0xfb, 0x84, 0x10, 0x7a, 0xee, 0x91, 0x5, 0x45, 0xd1, 0xae, 0x3a, 0x50, 0xc4, 0xbb, 0x2f, 0xe5, 0x71, 0xe, 0x9a, 0xf0, 0x64, 0x1b, 0x8f, 0xcf, 0x5b, 0x24, 0xb0, 0xda, 0x4e, 0x31, 0xa5, 0xb1, 0x25, 0x5a, 0xce, 0xa4, 0x30, 0x4f, 0xdb, 0x9b, 0xf, 0x70, 0xe4, 0x8e, 0x1a, 0x65, 0xf1, 0x4d, 0xd9, 0xa6, 0x32, 0x58, 0xcc, 0xb3, 0x27, 0x67, 0xf3, 0x8c, 0x18, 0x72, 0xe6, 0x99, 0xd, 0x19, 0x8d, 0xf2, 0x66, 0xc, 0x98, 0xe7, 0x73, 0x33, 0xa7, 0xd8, 0x4c, 0x26, 0xb2, 0xcd, 0x59, 0x76, 0xe2, 0x9d, 0x9, 0x63, 0xf7, 0x88, 0x1c, 0x5c, 0xc8, 0xb7, 0x23, 0x49, 0xdd, 0xa2, 0x36, 0x22, 0xb6, 0xc9, 0x5d, 0x37, 0xa3, 0xdc, 0x48, 0x8, 0x9c, 0xe3, 0x77, 0x1d, 0x89, 0xf6, 0x62, 0xde, 0x4a, 0x35, 0xa1, 0xcb, 0x5f, 0x20, 0xb4, 0xf4, 0x60, 0x1f, 0x8b, 0xe1, 0x75, 0xa, 0x9e, 0x8a, 0x1e, 0x61, 0xf5, 0x9f, 0xb, 0x74, 0xe0, 0xa0, 0x34, 0x4b, 0xdf, 0xb5, 0x21, 0x5e, 0xca]
])

pi = np.array([
    0xFC, 0xEE, 0xDD, 0x11, 0xCF, 0x6E, 0x31, 0x16,
    0xFB, 0xC4, 0xFA, 0xDA, 0x23, 0xC5, 0x04, 0x4D,
    0xE9, 0x77, 0xF0, 0xDB, 0x93, 0x2E, 0x99, 0xBA,
    0x17, 0x36, 0xF1, 0xBB, 0x14, 0xCD, 0x5F, 0xC1,
    0xF9, 0x18, 0x65, 0x5A, 0xE2, 0x5C, 0xEF, 0x21,
    0x81, 0x1C, 0x3C, 0x42, 0x8B, 0x01, 0x8E, 0x4F,
    0x05, 0x84, 0x02, 0xAE, 0xE3, 0x6A, 0x8F, 0xA0,
    0x06, 0x0B, 0xED, 0x98, 0x7F, 0xD4, 0xD3, 0x1F,
    0xEB, 0x34, 0x2C, 0x51, 0xEA, 0xC8, 0x48, 0xAB,
    0xF2, 0x2A, 0x68, 0xA2, 0xFD, 0x3A, 0xCE, 0xCC,
    0xB5, 0x70, 0x0E, 0x56, 0x08, 0x0C, 0x76, 0x12,
    0xBF, 0x72, 0x13, 0x47, 0x9C, 0xB7, 0x5D, 0x87,
    0x15, 0xA1, 0x96, 0x29, 0x10, 0x7B, 0x9A, 0xC7,
    0xF3, 0x91, 0x78, 0x6F, 0x9D, 0x9E, 0xB2, 0xB1,
    0x32, 0x75, 0x19, 0x3D, 0xFF, 0x35, 0x8A, 0x7E,
    0x6D, 0x54, 0xC6, 0x80, 0xC3, 0xBD, 0x0D, 0x57,
    0xDF, 0xF5, 0x24, 0xA9, 0x3E, 0xA8, 0x43, 0xC9,
    0xD7, 0x79, 0xD6, 0xF6, 0x7C, 0x22, 0xB9, 0x03,
    0xE0, 0x0F, 0xEC, 0xDE, 0x7A, 0x94, 0xB0, 0xBC,
    0xDC, 0xE8, 0x28, 0x50, 0x4E, 0x33, 0x0A, 0x4A,
    0xA7, 0x97, 0x60, 0x73, 0x1E, 0x00, 0x62, 0x44,
    0x1A, 0xB8, 0x38, 0x82, 0x64, 0x9F, 0x26, 0x41,
    0xAD, 0x45, 0x46, 0x92, 0x27, 0x5E, 0x55, 0x2F,
    0x8C, 0xA3, 0xA5, 0x7D, 0x69, 0xD5, 0x95, 0x3B,
    0x07, 0x58, 0xB3, 0x40, 0x86, 0xAC, 0x1D, 0xF7,
    0x30, 0x37, 0x6B, 0xE4, 0x88, 0xD9, 0xE7, 0x89,
    0xE1, 0x1B, 0x83, 0x49, 0x4C, 0x3F, 0xF8, 0xFE,
    0x8D, 0x53, 0xAA, 0x90, 0xCA, 0xD8, 0x85, 0x61,
    0x20, 0x71, 0x67, 0xA4, 0x2D, 0x2B, 0x09, 0x5B,
    0xCB, 0x9B, 0x25, 0xD0, 0xBE, 0xE5, 0x6C, 0x52,
    0x59, 0xA6, 0x74, 0xD2, 0xE6, 0xF4, 0xB4, 0xC0,
    0xD1, 0x66, 0xAF, 0xC2, 0x39, 0x4B, 0x63, 0xB6
])

reverse_pi = np.array([
    0xA5, 0x2D, 0x32, 0x8F, 0x0E, 0x30, 0x38, 0xC0,
    0x54, 0xE6, 0x9E, 0x39, 0x55, 0x7E, 0x52, 0x91,
    0x64, 0x03, 0x57, 0x5A, 0x1C, 0x60, 0x07, 0x18,
    0x21, 0x72, 0xA8, 0xD1, 0x29, 0xC6, 0xA4, 0x3F,
    0xE0, 0x27, 0x8D, 0x0C, 0x82, 0xEA, 0xAE, 0xB4,
    0x9A, 0x63, 0x49, 0xE5, 0x42, 0xE4, 0x15, 0xB7,
    0xC8, 0x06, 0x70, 0x9D, 0x41, 0x75, 0x19, 0xC9,
    0xAA, 0xFC, 0x4D, 0xBF, 0x2A, 0x73, 0x84, 0xD5,
    0xC3, 0xAF, 0x2B, 0x86, 0xA7, 0xB1, 0xB2, 0x5B,
    0x46, 0xD3, 0x9F, 0xFD, 0xD4, 0x0F, 0x9C, 0x2F,
    0x9B, 0x43, 0xEF, 0xD9, 0x79, 0xB6, 0x53, 0x7F,
    0xC1, 0xF0, 0x23, 0xE7, 0x25, 0x5E, 0xB5, 0x1E,
    0xA2, 0xDF, 0xA6, 0xFE, 0xAC, 0x22, 0xF9, 0xE2,
    0x4A, 0xBC, 0x35, 0xCA, 0xEE, 0x78, 0x05, 0x6B,
    0x51, 0xE1, 0x59, 0xA3, 0xF2, 0x71, 0x56, 0x11,
    0x6A, 0x89, 0x94, 0x65, 0x8C, 0xBB, 0x77, 0x3C,
    0x7B, 0x28, 0xAB, 0xD2, 0x31, 0xDE, 0xC4, 0x5F,
    0xCC, 0xCF, 0x76, 0x2C, 0xB8, 0xD8, 0x2E, 0x36,
    0xDB, 0x69, 0xB3, 0x14, 0x95, 0xBE, 0x62, 0xA1,
    0x3B, 0x16, 0x66, 0xE9, 0x5C, 0x6C, 0x6D, 0xAD,
    0x37, 0x61, 0x4B, 0xB9, 0xE3, 0xBA, 0xF1, 0xA0,
    0x85, 0x83, 0xDA, 0x47, 0xC5, 0xB0, 0x33, 0xFA,
    0x96, 0x6F, 0x6E, 0xC2, 0xF6, 0x50, 0xFF, 0x5D,
    0xA9, 0x8E, 0x17, 0x1B, 0x97, 0x7D, 0xEC, 0x58,
    0xF7, 0x1F, 0xFB, 0x7C, 0x09, 0x0D, 0x7A, 0x67,
    0x45, 0x87, 0xDC, 0xE8, 0x4F, 0x1D, 0x4E, 0x04,
    0xEB, 0xF8, 0xF3, 0x3E, 0x3D, 0xBD, 0x8A, 0x88,
    0xDD, 0xCD, 0x0B, 0x13, 0x98, 0x02, 0x93, 0x80,
    0x90, 0xD0, 0x24, 0x34, 0xCB, 0xED, 0xF4, 0xCE,
    0x99, 0x10, 0x44, 0x40, 0x92, 0x3A, 0x01, 0x26,
    0x12, 0x1A, 0x48, 0x68, 0xF5, 0x81, 0x8B, 0xC7,
    0xD6, 0x20, 0x0A, 0x08, 0x00, 0x4C, 0xD7, 0x74
])

# l_vec = np.array([
#     1, 148, 32, 133, 16, 194, 192, 1,
#     251, 1, 192, 194, 16, 133, 32, 148
# ])

def x(a, b, out):
    for i in range(BLOCK_SIZE):
        out[i] = a[i] ^ b[i]

def s(indata, outdata):
    for i in range(BLOCK_SIZE):
        outdata[i] = pi[indata[i]]

def l(indata, outdata):
    tmp = indata.copy()

    for i in range(BLOCK_SIZE):
        r(tmp, outdata)
        tmp = outdata.copy()
    
# @functools.cache
# def gf_mul(a, b):
#     c = np.uint8(0x00)
#     for i in range(8):
#         if b & 1 == 1:
#             c ^= a
#         hi_bit = a & 0x80
#         a = np.uint8(a << 1)
#         if hi_bit == 0x80:
#             a ^= 0xc3
#         b >>= 1
#     return c

def r(indata, outdata):
    sum = 0x00

    for i in range(BLOCK_SIZE - 1): # можно в один цикл
        sum ^= l_vec_mul_gf[i, indata[i]]
        outdata[i] = indata[i+1]

    sum ^= l_vec_mul_gf[BLOCK_SIZE - 1, indata[BLOCK_SIZE - 1]]
    outdata[BLOCK_SIZE - 1] = sum

def s_reverse(indata, outdata):
    for i in range(BLOCK_SIZE):
        outdata[i] = reverse_pi[indata[i]]

def l_reverse(indata, outdata):
    tmp = indata.copy()

    for i in range(BLOCK_SIZE):
        r_reverse(tmp, outdata)
        tmp = outdata.copy() 

def r_reverse(indata, outdata):
    sum = indata[15]

    for i in range(1, BLOCK_SIZE): # можно в один цикл
        outdata[i] = indata[i-1]
        sum ^= l_vec_mul_gf[i, outdata[i]]
    outdata[0] = sum

def f(input_key, input_key_second, iteration_const):
    tmp1 = np.empty(BLOCK_SIZE, dtype=np.uint8)

    x(input_key, iteration_const, tmp1)
    s(tmp1, tmp1)
    l(tmp1, tmp1)
    x(tmp1, input_key_second, tmp1)

    output_key_second = input_key
    output_key = tmp1
    return output_key, output_key_second

def calc_consts():
    constants = [np.zeros(BLOCK_SIZE, dtype=np.uint8) for i in range(32)]

    for i in range(32):
        constants[i][0] = i + 1
        l(constants[i], constants[i])

    return constants
c = calc_consts()

def round_keys(key1, key2):
    keys = [None for x in range(10)]
    keys[0] = key1
    keys[1] = key2

    iter_1, iter_2 = keys[0], keys[1]
    iter_3, iter_4 = None, None

    for i in range(4):
        iter_3, iter_4 = f(iter_1, iter_2, c[0 + 8 * i])
        iter_1, iter_2 = f(iter_3, iter_4, c[1 + 8 * i])
        iter_3, iter_4 = f(iter_1, iter_2, c[2 + 8 * i])
        iter_1, iter_2 = f(iter_3, iter_4, c[3 + 8 * i])
        iter_3, iter_4 = f(iter_1, iter_2, c[4 + 8 * i])
        iter_1, iter_2 = f(iter_3, iter_4, c[5 + 8 * i])
        iter_3, iter_4 = f(iter_1, iter_2, c[6 + 8 * i])
        iter_1, iter_2 = f(iter_3, iter_4, c[7 + 8 * i])

        keys[2 * i + 2] = iter_1
        keys[2 * i + 3] = iter_2

    return keys

def encrypt_block(block, rnd_keys):
    out = block.copy()

    for i in range(9):
        x(out, rnd_keys[i], out)
        s(out, out)
        l(out, out)
    x(out, rnd_keys[9], out)
    return out

def decrypt_block(block, rnd_keys):
    out = block.copy()

    x(out, rnd_keys[9], out)
    for i in range(8, -1, -1):
        l_reverse(out, out)
        s_reverse(out, out)
        x(out, rnd_keys[i], out)
    return out

def padding(msg: bytes) -> bytes:
    if not len(msg) % BLOCK_SIZE == 0:
        to_append = b'\x01' + b'\x00' * ((BLOCK_SIZE - (len(msg) + 1) % BLOCK_SIZE) % BLOCK_SIZE)
        return msg + to_append
    else:
        return msg

def encrypt_msg(msg: bytes, rnd_keys) -> np.array:
    npmsg = np.array(list(padding(msg)), dtype=np.uint8)

    for i in range(0, len(npmsg), BLOCK_SIZE):
        blk = encrypt_block(npmsg[i : i + BLOCK_SIZE], rnd_keys)
        npmsg[i : i + BLOCK_SIZE] = blk
    return npmsg
    
def decrypt_msg(npmsg: np.array, rnd_keys, src_len) -> bytes:
    for i in range(0, len(npmsg), BLOCK_SIZE):
        blk = decrypt_block(npmsg[i : i + BLOCK_SIZE], rnd_keys)
        npmsg[i : i + BLOCK_SIZE] = blk
    return npmsg[:src_len].tobytes()

def main():    
    # предподсчет:
    # with open('a.txt', 'w') as f:
    #     str = '[\n'
    #     for x in range(len(l_vec)):
    #         str += '['
    #         for y in range(256):
    #             str += hex(gf_mul(l_vec[x], y))
    #             str += ', '
    #         str += '],\n'
    #     str += ']\n'
    #     f.write(str)

    key1 = np.array([
        0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
        0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77
    ])[::-1]

    key2 = np.array([
        0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10,
        0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef
    ])[::-1]

    rnd_keys = round_keys(key1, key2)
    print('round keys:')
    for i, key in enumerate(rnd_keys):
        print(i + 1, ') ', key)
    print()
    print()

    # nonfile test
    print('TEST single block')
    msg = key1
    print('msg: ' , msg)
    encr = encrypt_block(msg, rnd_keys)
    print('encrypted: ', encr)
    decr = decrypt_block(encr, rnd_keys)
    print('decrypted: ', decr)
    assert(np.array_equal(msg, decr) == True)
    print()
    print()


    print('TEST smallfile')
    with open('smallfile', 'rb') as f: # head -c 1K </dev/urandom> smallfile
        msg = f.read()
        print('msg:', msg)
        encr = encrypt_msg(msg, rnd_keys)
        print('encrypted:', encr)
        decr = decrypt_msg(encr, rnd_keys, len(msg))
        print('decrypted:', decr)
        assert(msg == decr)
        print()
        print()

    from timeit import default_timer as timer

    print('TEST largefile')
    with open('largefile', 'rb') as f: # head -c 100K </dev/urandom> largefile
        msg = f.read()

        start = timer()
        encr = encrypt_msg(msg, rnd_keys)
        end = timer()
        print('encrypted in ', end - start, 'sec')

        start = timer()
        decr = decrypt_msg(encr, rnd_keys, len(msg))
        end = timer()
        print('decrypted in ', end - start, 'sec')


        assert(msg == decr)
        print()
        print()




if __name__ == '__main__':
    main()
